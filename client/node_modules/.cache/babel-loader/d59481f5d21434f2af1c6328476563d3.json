{"ast":null,"code":"import _slicedToArray from \"/Users/aaronelkins/Desktop/Coding/React/e-com/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aaronelkins/Desktop/Coding/React/e-com/src/components/sign-in/sign-in.component.jsx\";\nimport React, { Component, useState } from 'react';\nimport './sign-in.styles.scss';\nimport { connect } from 'react-redux';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setUserCredentials = _useState2[1];\n\n  const email = userCredentials.email,\n        password = userCredentials.password;\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = (e, type) => {\n    setUserCredentials(...userCredentials, {\n      [type]: e.target.value\n    });\n  }; // const { email, password } = this.state;\n  // const { googleSignInStart } = this.props;\n\n\n  return React.createElement(\"div\", {\n    className: 'sign-in',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    handleChange: e => handleChange(e, 'email'),\n    label: \"E-Mail\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    handleChange: e => handleChange(e, 'password'),\n    label: \"Password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: 'buttons',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"SIGN IN\"), React.createElement(CustomButton, {\n    type: \"button\",\n    isGoogleSignIn: true,\n    onClick: googleSignInStart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"SIGN IN WITH GOOGLE\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/aaronelkins/Desktop/Coding/React/e-com/src/components/sign-in/sign-in.component.jsx"],"names":["React","Component","useState","connect","googleSignInStart","emailSignInStart","FormInput","CustomButton","SignIn","email","password","userCredentials","setUserCredentials","handleSubmit","e","preventDefault","handleChange","type","target","value","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,uBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,+BAApD;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEH,EAAAA,gBAAF;AAAoBD,EAAAA;AAApB,CAAD,KAA6C;AAAA,oBACVF,QAAQ,CAAC;AAAEO,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,QAAQ,EAAE;AAAvB,GAAD,CADE;AAAA;AAAA,QACjDC,eADiD;AAAA,QAChCC,kBADgC;;AAAA,QAEhDH,KAFgD,GAE5BE,eAF4B,CAEhDF,KAFgD;AAAA,QAEzCC,QAFyC,GAE5BC,eAF4B,CAEzCD,QAFyC;;AAIxD,QAAMG,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AACAV,IAAAA,gBAAgB,CAACI,KAAD,EAAQC,QAAR,CAAhB;AACH,GAHD;;AAKA,QAAMM,YAAY,GAAG,CAACF,CAAD,EAAGG,IAAH,KAAY;AAC7BL,IAAAA,kBAAkB,CAAE,GAAGD,eAAL,EAAsB;AAAE,OAACM,IAAD,GAAQH,CAAC,CAACI,MAAF,CAASC;AAAnB,KAAtB,CAAlB;AACH,GAFD,CATwD,CAaxD;AACA;;;AAEA,SACI;AAAK,IAAA,SAAS,EAAG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAFJ,EAGI;AAAM,IAAA,QAAQ,EAAGN,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,KAAK,EAAGJ,KAHZ;AAII,IAAA,YAAY,EAAIK,CAAD,IAAOE,YAAY,CAACF,CAAD,EAAG,OAAH,CAJtC;AAKI,IAAA,KAAK,EAAC,QALV;AAMI,IAAA,QAAQ,MANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EASI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,KAAK,EAAGJ,QAHZ;AAII,IAAA,YAAY,EAAII,CAAD,IAAOE,YAAY,CAACF,CAAD,EAAG,UAAH,CAJtC;AAKI,IAAA,KAAK,EAAC,UALV;AAMI,IAAA,QAAQ,MANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAiBI;AAAK,IAAA,SAAS,EAAG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI,oBAAC,YAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,cAAc,MAFlB;AAGI,IAAA,OAAO,EAAGV,iBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFJ,CAjBJ,CAHJ,CADJ;AAkCH,CAlDD;;AAoDA,MAAMgB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCjB,EAAAA,iBAAiB,EAAE,MAAMiB,QAAQ,CAACjB,iBAAiB,EAAlB,CADG;AAEpCC,EAAAA,gBAAgB,EAAE,CAACI,KAAD,EAAQC,QAAR,KAAqBW,QAAQ,CAAChB,gBAAgB,CAAC;AAAEI,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,CAAjB;AAFX,CAAL,CAAnC;;AAKA,eAAeP,OAAO,CAAC,IAAD,EAAMiB,kBAAN,CAAP,CAAiCZ,MAAjC,CAAf","sourcesContent":["import React, { Component, useState } from 'react';\nimport './sign-in.styles.scss';\nimport { connect } from 'react-redux';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport FormInput from '../form-input/form-input.component'\nimport CustomButton from '../custom-button/custom-button.component';\n\nconst SignIn = ({ emailSignInStart, googleSignInStart }) => {\n    const [userCredentials, setUserCredentials] = useState({ email: '', password: '' });\n    const { email, password } = userCredentials;\n\n    const handleSubmit = async e => {\n        e.preventDefault();\n        emailSignInStart(email, password);\n    }\n\n    const handleChange = (e,type) => {\n        setUserCredentials( ...userCredentials, { [type]: e.target.value } );\n    }\n\n    // const { email, password } = this.state;\n    // const { googleSignInStart } = this.props;\n\n    return (\n        <div className={ 'sign-in' }>\n            <h2>I already have an account</h2>\n            <span>Sign in with your email and password</span>\n            <form onSubmit={ handleSubmit }>\n                <FormInput \n                    name='email'\n                    type='email'\n                    value={ email }\n                    handleChange={ (e) => handleChange(e,'email') }\n                    label='E-Mail'\n                    required\n                />\n                <FormInput \n                    name='password'\n                    type='password'\n                    value={ password }\n                    handleChange={ (e) => handleChange(e,'password') }\n                    label='Password'\n                    required\n                />\n                <div className={ 'buttons' }>\n                    <CustomButton type=\"submit\">SIGN IN</CustomButton>\n                    <CustomButton\n                        type='button'\n                        isGoogleSignIn\n                        onClick={ googleSignInStart }\n                    >\n                        SIGN IN WITH GOOGLE\n                    </CustomButton>\n                </div>                \n            </form>\n        </div>\n    );\n}\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({ email, password })),\n})\n\nexport default connect(null,mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}